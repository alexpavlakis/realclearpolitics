#' Return realclearpolitics moving average based on the id of the race
#'
#' @param id The RCP id of the race
#' @param ... Additional arguments
#'
#' @return A tibble with the question, answer, date, and percent
#'
#' @examples
#' Time series RCP moving average for the 2018 senate race between Sherrod Brown (D) and Jim Renacci (R).
#' d <- get_rcp_ma(id = 6331)
#' @export
get_rcp_ma <- function(id = NULL, ...) {
  # Build URL
  if(!is.null(id)) {
    url <- paste0("https://www.realclearpolitics.com/epolls/json/", id, "_historical.js")
  }
  # Load raw data
  raw_data <- suppressWarnings(
    readLines("https://www.realclearpolitics.com/epolls/json/6331_historical.js")
  )
  # Drop `return_json` function call from string and extract json
  json_data <- raw_data %>%
    gsub("return_json[(]", "", .) %>%
    gsub("[)];", "", .) %>%
    fromJSON()
  # Extract the dates and values from the json blob
  vals <- bind_rows(json_data[[1]][[1]][[1]]) %>%
    as_data_frame()
  dates <- rep(json_data[[1]][[1]][[2]], each = n_distinct(vals$name))

  # Combine into a data frame.  This is the RCPP 5-poll moving average
  results <- vals %>%
    mutate(date = as.Date(tolower(substr(dates, 6, 16)), "%d %b %Y"),
           pct = round(as.numeric(value)/100, 2),
           question = json_data$poll$title) %>%
    select(question, date, answer = name, pct)
  structure(results, class = c("rcp_series", "tbl_df", "tbl", "data.frame"))
}


plot.rcp_series <- function(x, ...) {
  x %>%
    ggplot() +
    aes(x = date, y = pct, col = answer) +
    geom_line() +
    theme_minimal() +
    labs(title = x$question[1], col = NULL,
         x = NULL, y = NULL) +
    theme(legend.position = 'bottom',
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1))
}
